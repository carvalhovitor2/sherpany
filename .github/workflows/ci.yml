name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sanity:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Run validations
      run: ./.github/workflows/scripts/validate.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.API_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}

  terraform_plan:
    needs: sanity
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Plan
      run: ./.github/workflows/scripts/terraform-plan.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.API_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v2
      with:
        name: tfplan
        path: terraform/plan.out
        
    - name: Upload Terraform Plan json
      uses: actions/upload-artifact@v2
      with:
        name: json-tfplan
        path: terraform/plan.json


  terraform_assess:
    if: github.event_name == 'pull_request'
    needs: terraform_plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Download Terraform Plan
        uses: actions/download-artifact@v2
        with:
          name: json-tfplan

      - name: Generate Infracost diff
        run: |
          infracost diff --path=plan.json \
                          --format=json \
                          --out-file=/tmp/infracost.json

      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=update

  terraform_apply:
    if: github.ref == 'refs/heads/main'
    needs: terraform_plan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Download Terraform Plan
      uses: actions/download-artifact@v2
      with:
        name: tfplan

    - name: Terraform Apply
      run: ./.github/workflows/scripts/terraform-apply.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.API_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}


# Build, test, release, deploy

  build_image:
    needs: sanity
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
  
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.build-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
  
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: polls/
        tags: sherpany/web:latest
        load: true
        cache-from: type=local,src=/tmp/.build-cache
        cache-to: type=local,dest=/tmp/.build-cache
  
    - name: Save container image as a tar file
      run: docker save sherpany/web:latest -o web.tar
  
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: web
        path: web.tar
  

  scan_image:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: web
        path: artifact
  
    - name: Load container image from tar file
      run: docker load -i artifact/web.tar
  
    - name: Scan container image for vulnerabilities
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 1 --severity CRITICAL sherpany/web:latest --ignore-unfixed



  push_image:
    if: github.ref == 'refs/heads/main'
    needs: scan_image
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: web
        path: artifact
  
    - name: Load container image from tar file
      run: docker load -i artifact/web.tar
 
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.API_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
   
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Tag and push container image to ECR
      run: |
        docker tag sherpany/web:latest ${{ steps.login-ecr.outputs.registry }}/sherpany-web:${{ github.sha }}
        docker tag sherpany/web:latest ${{ steps.login-ecr.outputs.registry }}/sherpany-web:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/sherpany-web:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/sherpany-web:latest

  deploy:
    needs: [ push_image, terraform_apply ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Helm
      uses: azure/setup-helm@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.API_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region eu-central-1 --name sherpany 

    - name: Helm Upgrade or Install
      run: |
        helm install --replace ingress-controller ./helm/ingress-controller --namespace ingress-nginx --create-namespace --wait
        helm install --replace sherpany-release ./helm/sherpany --namespace sherpany --create-namespace --wait
